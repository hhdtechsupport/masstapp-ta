<?php
/**
 * @file
 * Custom functionality for Password Suggest.
 */

/**
 * Implements hook_menu().
 */
function password_suggest_menu() {
  $items = array();

  $items['admin/config/development/password_suggest'] = array(
    'title' => 'Password Suggest',
    'description' => 'Various settings to control Password Suggest custom functions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_suggest_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    );

  return $items;
}

/**
 * Settings form.
 */
function password_suggest_admin_settings($form, $form_state) {
  $no_yes = array(t('No'), t('Yes'));

  $form['password_suggest_min_length'] = array(
    '#title' => t('Minimum password length'),
    '#type' => 'textfield',
    '#size' => 10,
    '#required' => TRUE,
    '#default_value' => variable_get('password_suggest_min_length', 8),
    );

  $form['password_suggest_include_digits'] = array(
    '#title' => t('Include numeric digits'),
    '#type' => 'radios',
    '#options' => $no_yes,
    '#required' => TRUE,
    '#default_value' => variable_get('password_suggest_include_digits', 1),
    '#attributes' => array('class' => array('container-inline')),
    );

  $form['password_suggest_include_uppercase'] = array(
    '#title' => t('Include uppercase'),
    '#type' => 'radios',
    '#options' => $no_yes,
    '#required' => TRUE,
    '#default_value' => variable_get('password_suggest_include_uppercase', 1),
    '#attributes' => array('class' => array('container-inline')),
    );

  $form['password_suggest_include_special'] = array(
    '#title' => t('Include special characters'),
    '#type' => 'radios',
    '#options' => $no_yes,
    '#required' => TRUE,
    '#default_value' => variable_get('password_suggest_include_special', 0),
    '#attributes' => array('class' => array('container-inline')),
    );

  $form['password_suggest_phrase'] = array(
    '#title' => t('My starting phrase'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('password_suggest_phrase', ''),
    '#description' => t('Enter a meanigful phrase from which to make suggestions.'),
    );

  if (isset($form_state['storage']['suggestions'])) {
    $form['suggestions'] = array(
      '#type' => 'markup',
      '#markup' => '<h2>' . t('Here are some suggestions') . '</h2>'
        . theme('item_list', array('items' => $form_state['storage']['suggestions'])),
      );
  }

  $form['#submit'] = array('password_suggest_admin_settings_submit');

  return system_settings_form($form);
}

function password_suggest_admin_settings_submit($form, &$form_state) {
  $phrase = $form_state['values']['password_suggest_phrase'];
  $suggestions = module_invoke_all('password_suggest', $phrase);
  $form_state['storage']['suggestions'] = $suggestions;

  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_password_suggest();
 */
function password_suggest_password_suggest($phrase) {
  $suggesions = array();

  $suggestions[] = trim($phrase);

  $suggestions[] = strtr($phrase, array(' ' => '-'));
  $deblanked = strtr($phrase, array(' ' => ''));
  
  $has_blank = strpos($phrase, ' ');
  if ($has_blank !== FALSE) {
    $pieces = explode(' ', $phrase);
    $suggestion[] = implode('', $pieces);
    
    $suggestions[] = implode('', array_map('ucfirst', $pieces));
  }
  
  $has_article = strpos($phrase, ' a ') || strpos($phrase, ' an ');
  if ($has_article !== FALSE) {
    $suggestions[] = strtr($phrase, array(' for ' => '4', ' a ' => '1', ' an ' => '1', ' ' => ''));
  }

  return $suggestions;
}

function _password_suggest_upper_first($word) {
  return ucfirst($word);
}
