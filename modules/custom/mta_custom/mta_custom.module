<?php
/**
 * @file
 * Custom functionality for MassTAPP-TA.
 */

/**
 * Implements hook_menu().
 */
function mta_custom_menu() {
  $items = array();

  $items['admin/config/administration/mta_custom'] = array(
    'title' => 'MassTAPP TA',
    'description' => 'Various settings to control MassTAPP TA custom functions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mta_custom_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function mta_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;
//  dpm($form, $form_id);
  switch ($form_id) {
    case 'weekly_report_node_form';
      $day_of_week = variable_get('mta_custom_report_day', 'Friday');
      // This returns the next xxx day on or after today.
      $this_week = strtotime($day_of_week);

      $how_many = variable_get('mta_custom_list_dates', 33);

      $format = 'simple';
      $date = $this_week;
      $dates = array();
      for ($i = 0; $i < $how_many; ++$i) {
        $d = format_date($date, $format);
        $dates[$d] = $d;
        // Note there is a hiccup on Daylight Time changes.
        $date -= 604800;    // One week.
      }

      // Change it to a select field.
      $form['field_week'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
      $form['field_week'][LANGUAGE_NONE][0]['value']['#options'] = $dates;
      $form['field_week'][LANGUAGE_NONE][0]['value']['#description'] =
        t('Please choose the @dow date that is appropriate for your report.',
          array('@dow' => $day_of_week));
      if (is_null($form['field_week'][LANGUAGE_NONE][0]['value']['#default_value'])) {
        $form['field_week'][LANGUAGE_NONE][0]['value']['#default_value'] = format_date($this_week, $format);
      }

      // And hide the numeric date field.
      $form['field_week_date']['#access'] = FALSE;

      // Change the "add new ta record" button.
      $form['field_program_served'][LANGUAGE_NONE]['actions']['ief_add']['#value'] = t('Add TA Record');

      // Let them muck with the published option.
      if (!user_access('administer nodes')) {
        $form['options']['#access'] = TRUE;
        $form['options']['promote']['#access'] = FALSE;
        $form['options']['sticky']['#access'] = FALSE;
      }
      break;

    case 'individual_node_form':
//      dpm($form, $form_id);
      break;

    case 'program_node_form';
      $form['field_whos_involved']['#access'] = FALSE;
      break;
  }

}

/**
 * Imlements hook_node_presave().
 * Save the report date in numeric format.
 */
function mta_custom_node_presave($node) {
  switch ($node->type) {
    case 'weekly_report':
      $d = strtotime($node->field_week[LANGUAGE_NONE][0]['value']);

      $node->field_week_date = array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $d,
            'value2' => $d,
            'showtodate' => FALSE,
            'offset' => 0,
            'offset2' => 0,
//            'timezone' => ,
//            'timezone_db' => ,
            'date_type' => 'datestamp',
            ),
          ),
        );
      break;

    case 'program':
      $program = entity_metadata_wrapper('node', $node);
      $who = array();
      foreach ($program->field_individual_hours->getIterator() as $individual) {
        $who[] = $individual->title->value();
      }
      $program->field_whos_involved->set(filter_xss(implode(', ', $who)));
      break;
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function mta_custom_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
//  dpm($entity_form, $entity_form['#title']);
  if ($entity_form['#entity_type'] == 'node') {
    switch ($entity_form['#bundle']) {
      case 'program':
        // Change the button texts.
        $entity_form['actions']['ief_add_save']['#value'] = t('Add TA record');

        $entity_form['field_individual_hours'][LANGUAGE_NONE]['actions']['ief_add']['#value'] = t('Add TA provider/consultant');
        break;

      case 'individual':
        // Change the button texts.
        $entity_form['actions']['ief_add_save']['#value'] = t('Add TA provider/consultant');

        // Set the default TA provider to be the current user.
        global $user;
        $entity_form['field_individual'][LANGUAGE_NONE]['#default_value'] = (string)$user->uid;
        break;
    }
  }
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 * Shows various fields on various content types.
 */
function mta_custom_inline_entity_form_table_fields_alter(&$fields, $context) {
  foreach ($context['allowed_bundles'] as $type) {
    switch ($type) {
      case 'program':
        unset($fields['status']);
        $fields['field_community'] = array(
          'type' => 'field',
          'label' => t('Community'),
          'weight' => 11,
          );
        $fields['field_number_served'] = array(
          'type' => 'field',
          'label' => t('Number Served'),
          'weight' => 21,
          );
        $fields['field_whos_involved'] = array(
          'type' => 'field',
          'label' => t('Individuals'),
          'weight' => 26,
          );
        break;

      case 'individual':
        unset($fields['title']);
        unset($fields['status']);
        $fields['field_individual'] = array(
          'type' => 'field',
          'label' => t('Individual'),
          'weight' => 11,
          );
        $fields['field_outreach_hours'] = array(
          'type' => 'field',
          'label' => t('Outreach Hours'),
          'settings' => array('scale' => 1),
          'weight' => 16,
          );
        $fields['field_remote'] = array(
          'type' => 'field',
          'label' => t('Remote'),
          'settings' => array('scale' => 1),
          'weight' => 16,
          );
        $fields['field_in_person'] = array(
          'type' => 'field',
          'label' => t('In Person'),
          'settings' => array('scale' => 1),
          'weight' => 21,
          );
        $fields['field_prep'] = array(
          'type' => 'field',
          'label' => t('Prep'),
          'settings' => array('scale' => 1),
          'weight' => 26,
          );
        $fields['field_travel'] = array(
          'type' => 'field',
          'label' => t('Travel'),
          'settings' => array('scale' => 1),
          'weight' => 31,
          );
        break;
    }
  }
}

/**
 * Settings form.
 */
function mta_custom_admin_settings($form, $form_state) {
  $days = array(
    'Sunday' => t('Sunday'),
    'Monday' => t('Monday'),
    'Tuesday' => t('Tuesday'),
    'Wednesday' => t('Wednesday'),
    'Thursday' => t('Thursday'),
    'Friday' => t('Friday'),
    'Saturday' => t('Saturday'),
    );
  $form['mta_custom_report_day'] = array(
    '#title' => t('Weekly Report Day of Week'),
    '#type' => 'radios',
    '#options' => $days,
    '#required' => TRUE,
    '#default_value' => variable_get('mta_custom_report_day', 'Friday'),
    '#description' => t('This is the day of the week upon which Weekly Reports are submitted.'),
    );

  $weeks = range(1, 200, 4);
  $weeks = array_combine($weeks, $weeks);
  $form['mta_custom_list_dates'] = array(
    '#title' => t('How many weeks back to offer'),
    '#type' => 'radios',
    '#options' => $weeks,
    '#required' => TRUE,
    '#default_value' => variable_get('mta_custom_list_dates', 33),
    '#description' => t('This is how many weeks to show in the date list for Weekly Reports.'),
    '#attributes' => array('class' => array('container-inline')),
    );

  return system_settings_form($form);
}
